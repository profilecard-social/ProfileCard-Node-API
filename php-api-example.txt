$router->mount('/api', function () use ($router) {

    $router->get('/', function () {
        header('HTTP/1.1 404 Not Found');
        include('./views/404.php');
    });

    $router->get('/getRememberToken/{email}/{password}', function ($email, $password) {
        header("Access-Control-Allow-Origin: *");

        $email = base64_decode($email);
        $password = base64_decode($password);

        $stmt = Database::getInstance()->prepare("SELECT * FROM users where email = :email LIMIT 1");
        $stmt->bindParam(":email", $email);
        $stmt->execute();
        $emailCount = $stmt->rowCount();
        $row = $stmt->fetch();

        if ($emailCount == 1) {
            if (password_verify($password, $row["passwordHash"])) {
                sendHeader($row["token"], 200);
                exit;
            } else {
                sendHeader("Invalid Credentials", 403);
                exit;
            }
        } else {
            sendHeader("Invalid Credentials", 403);
            exit;
        }
    });

    $router->get('/createAccount/{email}/{password}/{username}', function ($email, $password, $username) {

        $email = base64_decode($email);
        $password = base64_decode($password);
        $username = base64_decode($username);


        header("Access-Control-Allow-Origin: *");
        $stmt = Database::getInstance()->prepare("SELECT * FROM users where email = :email LIMIT 1");
        $stmt->bindParam(":email", $email);
        $stmt->execute();
        $emailCount = $stmt->rowCount();

        $stmt = Database::getInstance()->prepare("SELECT * FROM users where name = :name LIMIT 1");
        $stmt->bindParam(":name", $username);
        $stmt->execute();
        $usernameCount = $stmt->rowCount();

        $stmt = Database::getInstance()->prepare("SELECT * FROM punishments where target = :target and type = :type");
        $stmt->bindParam(":target", $username);
        $bantype = 2;
        $stmt->bindParam(":type", $bantype);
        $stmt->execute();
        $punishmentNameCount = $stmt->rowCount();

        if ($punishmentNameCount == 0) {
            if (ctype_alnum($username)) {
                if ($usernameCount == 0) {
                    if ($emailCount == 0) {
                        $bytes = openssl_random_pseudo_bytes(50);

                        $generatedPasswordHash = password_hash($password, PASSWORD_BCRYPT);
                        $token = bin2hex($bytes);

                        $stmt = Database::getInstance()->prepare("INSERT INTO users (name,email,token,passwordHash,status) VALUES (:name, :email, :token , :passwordHash, :status);");


                        $stmt->bindParam(":name", $username);
                        $stmt->bindParam(":email", $email);
                        $stmt->bindParam(":token", $token);
                        $stmt->bindParam(":passwordHash", $generatedPasswordHash);

                        $defaultStatus = trans("default_status");
                        $stmt->bindParam(":status", $defaultStatus);

                        $stmt->execute();
                        $stmt = Database::getInstance()->prepare("UPDATE users SET theme = ? WHERE name = ? LIMIT 1");
                        $theme = 1;
                        $stmt->execute([$theme, $username]);

                        $country_code = null;
                   
                        if (!isEnglish()) {
                            $country_code = "de";
                        } else {
                            $country_code = "en";
                        }

                        $stmt = Database::getInstance()->prepare("UPDATE users SET lang = ? WHERE name = ? LIMIT 1");
                        $stmt->execute([$country_code, $username]);

                        sendHeader($token, 200);
                    } else {
                        sendHeader("Email is already taken", 403);
                    }
                } else {
                    sendHeader("Username is already taken", 403);
                }
            } else {
                sendHeader("Invalid Symbols in Username", 403);
            }
        } else {
            sendHeader("Username is banned", 403);
        }
    });

    $router->get('/verifyToken/{rememberToken}', function ($rememberToken) {
        header("Access-Control-Allow-Origin: *");

        $rememberToken = base64_decode($rememberToken);
        $stmt = Database::getInstance()->prepare("SELECT * FROM users where token = :token LIMIT 1");
        $stmt->bindParam(":token", $rememberToken);
        $stmt->execute();
        $tokenCount = $stmt->rowCount();
        $data = $stmt->fetch();

        if ($tokenCount > 0) {
            sendHeader($data["name"], 200);
            $timestamp = time();
            $stmt = Database::getInstance()->prepare("UPDATE users SET last_seen_at = ? WHERE token = ? LIMIT 1");
            $stmt->execute([$timestamp, $rememberToken]);
            exit;
        }

        sendHeader("Invalid Token", 401);
        exit;
    });

    $router->get('/updatePassword/{rememberToken}/{newPassword}/{oldPassword}', function ($rememberToken, $newPassword, $oldPassword) {
        header("Access-Control-Allow-Origin: *");

        $rememberToken = base64_decode($rememberToken);
        $newPassword = base64_decode($newPassword);
        $oldPassword = base64_decode($oldPassword);

        $stmt = Database::getInstance()->prepare("SELECT * FROM users where token = :token LIMIT 1");
        $stmt->bindParam(":token", $rememberToken);
        $stmt->execute();
        $data = $stmt->fetch();
        $tokenCount = $stmt->rowCount();

        if (password_verify($oldPassword, $data["passwordHash"])) {
            if ($tokenCount > 0) {

                $generatedPasswordHash = password_hash($newPassword, PASSWORD_BCRYPT);
                $stmt = Database::getInstance()->prepare("UPDATE users SET passwordHash = ? WHERE token = ? LIMIT 1");
                $stmt->execute([$generatedPasswordHash, $rememberToken]);

                sendHeader("Password changed", 200);
                exit;
            } else {
                sendHeader("Invalid Token", 401);
                exit;
            }
        } else {
            sendHeader("Wrong Oldpass", 401);
            exit;
        }
    });

    $router->get('/invalidateToken/{rememberToken}', function ($rememberToken) {
        header("Access-Control-Allow-Origin: *");

        $rememberToken = base64_decode($rememberToken);
        $stmt = Database::getInstance()->prepare("SELECT * FROM users where token = :token LIMIT 1");
        $stmt->bindParam(":token", $rememberToken);
        $stmt->execute();
        $tokenCount = $stmt->rowCount();

        if ($tokenCount > 0) {

            $bytes = openssl_random_pseudo_bytes(50);
            $newToken = bin2hex($bytes);

            $stmt = Database::getInstance()->prepare("UPDATE users SET token = ? WHERE token = ? LIMIT 1");
            $stmt->execute([$newToken, $rememberToken]);
            sendHeader($newToken, 200);
            exit;
        }

        sendHeader("Invalid Token", 401);
        exit;
    });

    $router->get('/updateValue/{rememberToken}/{key}/{value}', function ($rememberToken, $key, $value) {
        header("Access-Control-Allow-Origin: *");

        $rememberToken = base64_decode($rememberToken);
        $stmt = Database::getInstance()->prepare("SELECT * FROM users where token = :token LIMIT 1");
        $stmt->bindParam(":token", $rememberToken);
        $stmt->execute();
        $tokenCount = $stmt->rowCount();

        $key = base64_decode($key);
        $value = base64_decode($value);

        $allowedKeys = [
            "status",
            "buttoncolor",
            "textcolor",
            "bgcolor",
            "theme",
            "lang",
        ];

        if ($tokenCount > 0 && in_array($key, $allowedKeys)) {
            $sql = "UPDATE users SET "  . $key . " = ? WHERE token = ? LIMIT 1";
            $stmt = Database::getInstance()->prepare($sql);
            $stmt->execute([$value, $rememberToken]);
            sendHeader($value, 200);
            exit;
        }
        sendHeader("Invalid Token", 401);
        exit;
    });

    $router->get('/userData/{rememberToken}', function ($rememberToken) {
        header("Access-Control-Allow-Origin: *");
        $rememberToken = base64_decode($rememberToken);
        $stmt = Database::getInstance()->prepare("SELECT * FROM users where token = :token LIMIT 1");
        $stmt->bindParam(":token", $rememberToken);
        $stmt->execute();
        $tokenCount = $stmt->rowCount();
        $DBdata = $stmt->fetch();

        if ($tokenCount > 0) {

            if (file_exists($_SERVER['DOCUMENT_ROOT'] . "/uploads/" . md5(strtolower($DBdata["name"])) . ".png")) {
                $profilePicture = "/uploads/" . md5(strtolower($DBdata["name"])) . ".png";
            } else if (file_exists($_SERVER['DOCUMENT_ROOT'] . "/uploads/" . $DBdata["id"] . ".png")) {
                $profilePicture = "/uploads/" . $DBdata["id"] . ".png";
            } else {
                $profilePicture = "/uploads/default.png";
            }

            $json = [
                "name" => $DBdata["name"],
                "email" => $DBdata["email"],
                "status" => $DBdata["status"],
                "buttoncolor" => $DBdata["buttoncolor"],
                "textcolor" => $DBdata["textcolor"],
                "bgcolor" => $DBdata["bgcolor"],
                "theme" => $DBdata["theme"],
                "lang" => $DBdata["lang"],
                "last_seen_at" => $DBdata["last_seen_at"],
                "icon" => "https://pfcard.link/" . $profilePicture,
                "success" => "true",
            ];

            sendHeaderWithJsonData(json_encode($json), 200);
            $timestamp = time();
            $stmt = Database::getInstance()->prepare("UPDATE users SET last_seen_at = ? WHERE token = ? LIMIT 1");
            $stmt->execute([$timestamp, $rememberToken]);
            exit;
        }

        sendHeader("Invalid Token", 401);
        exit;
    });
});

function sendHeader($data, $code = 200)
{

    http_response_code($code);
    header("Content-Type: application/json");
    $json = [
        "code" => $code,
        "success" => $code === 200,
        "message" => $data
    ];
    echo json_encode($json);
    die;
}

function sendHeaderWithJsonData($data, $code = 200)
{

    http_response_code($code);
    header("Content-Type: application/json");
    echo $data;
    die;
}